# Buntspecht Multi-Provider Configuration Example
# Copy this file to config.toml and adjust the values

# Fediverse/Mastodon Accounts
[[accounts]]
name = "personal"
type = "mastodon"  # Optional: account type (default: mastodon)
instance = "https://mastodon.social"
accessToken = "your-personal-token"

[[accounts]]
name = "work"
type = "mastodon"  # Optional: account type (default: mastodon)
instance = "https://fosstodon.org"
accessToken = "your-work-token"

[[accounts]]
name = "bot"
type = "mastodon"  # Optional: account type (default: mastodon)
instance = "https://botsin.space"
accessToken = "your-bot-token"

[bot]
# Multi-Provider Configuration
# Each provider can have its own schedule and configuration

# Provider 1: Hourly ping messages (to all accounts)
[[bot.providers]]
name = "hourly-ping"
type = "ping"
cronSchedule = "0 * * * *"  # Every hour
enabled = true
accounts = ["personal", "work", "bot"]  # To all three accounts

[bot.providers.config]
message = "Hourly ping from Buntspecht!"

# Provider 2: Daily system statistics (only to work account)
[[bot.providers]]
name = "daily-stats"
type = "command"
cronSchedule = "0 9 * * *"  # Every day at 9:00 AM
enabled = true
accounts = ["work"]  # Only to work account

[bot.providers.config]
command = "uptime"
timeout = 10000

# Provider 3: GitHub repository updates (to personal and bot account)
[[bot.providers]]
name = "github-stats"
type = "jsoncommand"
cronSchedule = "0 */6 * * *"  # Every 6 hours
enabled = true
accounts = ["personal", "bot"]  # To personal and bot account

[bot.providers.config]
command = "curl -s 'https://api.github.com/repos/octocat/Hello-World' | jq '{name: .name, stars: .stargazers_count, forks: .forks_count, language: .language}'"
template = "Repository {{name}} ({{language}}): {{stars}} stars and {{forks}} forks"
timeout = 15000

# Provider 4: Weekly summary (only to personal account, disabled)
[[bot.providers]]
name = "weekly-summary"
type = "ping"
cronSchedule = "0 10 * * 1"  # Every Monday at 10:00 AM
enabled = false  # Disabled
accounts = ["personal"]  # Only to personal account

[bot.providers.config]
message = "Weekly summary: A new week begins!"

# Provider 5: Weather updates (only to bot account)
[[bot.providers]]
name = "weather-updates"
type = "jsoncommand"
cronSchedule = "0 */3 * * *"  # Every 3 hours
enabled = true
accounts = ["bot"]  # Only to bot account

[bot.providers.config]
# Example with OpenWeatherMap API (API key required)
command = "curl -s 'https://api.openweathermap.org/data/2.5/weather?q=Berlin&appid=YOUR_API_KEY&units=metric' | jq '{temp: .main.temp, desc: .weather[0].description, city: .name, humidity: .main.humidity}'"
template = "Weather in {{city}}: {{temp}}Â°C, {{desc}} (humidity: {{humidity}}%)"
timeout = 10000

[bot.providers.config.env]
API_KEY = "your-openweathermap-api-key"

# Provider 6: Push provider for alerts (triggered externally)
[[bot.providers]]
name = "alert-system"
type = "push"
# No cronSchedule needed for push providers
enabled = true
accounts = ["personal", "work"]  # Alert both personal and work accounts

[bot.providers.config]
defaultMessage = "Alert from monitoring system"
allowExternalMessages = true
maxMessageLength = 280

[logging]
# Log level: debug, info, warn, error
level = "info"

[telemetry]
# OpenTelemetry configuration for monitoring and observability
# IMPORTANT: Telemetry only works with 'bun run' or 'npm start', NOT with single binaries!
# Single binaries (buntspecht-linux-x64, etc.) have OpenTelemetry dependencies excluded.
# For telemetry use Docker or run the bot directly with Bun/Node.js.
enabled = false  # Enable/disable telemetry
serviceName = "buntspecht"
serviceVersion = "0.8.0"

[telemetry.jaeger]
# Jaeger for distributed tracing
enabled = false
endpoint = "http://localhost:14268/api/traces"

[telemetry.prometheus]
# Prometheus for metrics
enabled = false
port = 9090
endpoint = "/metrics"

[telemetry.tracing]
# Enable/disable tracing
enabled = false

[telemetry.metrics]
# Enable/disable metrics
enabled = false

# Notes:
# - Each provider runs independently with its own schedule
# - Providers can be individually enabled/disabled with 'enabled = true/false'
# - Different provider types can be mixed
# - Each provider can have its own environment variables
# - Errors in one provider do not affect others
#
# Cron schedule examples:
# "0 * * * *"       = every hour
# "*/30 * * * *"    = every 30 minutes  
# "0 9 * * *"       = every day at 9:00 AM
# "0 9 * * 1"       = every Monday at 9:00 AM
# "0 */6 * * *"     = every 6 hours
# "0 9,17 * * 1-5"  = Mon-Fri at 9:00 AM and 5:00 PM