# Buntspecht Configuration with Secret Rotation Detection
# Copy this file to config.toml and adjust the values

# Example accounts using external secret sources that will be monitored for rotation
[[accounts]]
name = "mastodon-vault"
type = "mastodon"
instance = "https://mastodon.social"
accessTokenSource = "vault://secret/buntspecht/mastodon-token"  # Will be monitored for rotation
defaultVisibility = "unlisted"

[[accounts]]
name = "bluesky-aws"
type = "bluesky"
instance = "https://bsky.social"
identifierSource = "aws://buntspecht/bluesky-credentials?key=identifier"  # Will be monitored
passwordSource = "aws://buntspecht/bluesky-credentials?key=password"      # Will be monitored

[[accounts]]
name = "mastodon-env"
type = "mastodon"
instance = "https://mastodon.social"
accessToken = "${MASTODON_ACCESS_TOKEN}"  # Environment variable - will be monitored
defaultVisibility = "unlisted"

[bot]
# Provider configuration
[[bot.providers]]
name = "hourly-ping"
type = "ping"
cronSchedule = "0 * * * *"  # Every hour
accounts = ["mastodon-vault", "bluesky-aws"]
enabled = true

[config]
message = "ðŸ¤– Hourly ping from Buntspecht!"

[logging]
level = "info"

# Secret Rotation Detection Configuration
[secretRotation]
enabled = true                          # Enable automatic secret rotation detection
checkInterval = "0 */15 * * * *"        # Check every 15 minutes (cron expression)
retryOnFailure = true                   # Retry failed secret checks
retryDelay = 60                         # Wait 60 seconds before retrying
maxRetries = 3                          # Maximum number of retries
notifyOnRotation = true                 # Log notifications when secrets are rotated
testConnectionOnRotation = true         # Test account connections after secret rotation

# Optional: OpenTelemetry configuration for monitoring secret rotation
[telemetry]
enabled = true
serviceName = "buntspecht"
serviceVersion = "0.6.4"

[telemetry.metrics]
enabled = true

[telemetry.prometheus]
enabled = true
port = 9090
endpoint = "/metrics"

# The secret rotation detector will automatically:
# 1. Scan all accounts for external secret sources (vault://, aws://, azure://, gcp://, file://, ${ENV_VAR})
# 2. Monitor these secrets for changes every 15 minutes
# 3. When a secret changes:
#    - Update the account configuration with the new secret value
#    - Reinitialize the social media client for that account
#    - Test the connection to verify the new credentials work
#    - Log the rotation event
#    - Record telemetry metrics
#
# Supported secret sources:
# - Environment variables: ${VAR_NAME}
# - File-based: file:///path/to/secret
# - HashiCorp Vault: vault://path/to/secret?key=fieldName
# - AWS Secrets Manager: aws://secret-name?key=fieldName&region=us-east-1
# - Azure Key Vault: azure://vault-name/secret-name?version=version-id
# - Google Cloud Secret Manager: gcp://project-id/secret-name?version=version-id