# Buntspecht Telemetrie Konfiguration Beispiel
# Diese Datei zeigt, wie OpenTelemetry f√ºr Monitoring und Observability konfiguriert wird
#
# WICHTIGER HINWEIS FUER SINGLE BINARY BUILDS:
# OpenTelemetry funktioniert NICHT mit den vorkompilierten Single Binaries (buntspecht-linux-x64, etc.)!
# Die OpenTelemetry-Dependencies werden bei 'bun build --compile' ausgeschlossen (--external @opentelemetry/*).
# 
# Fuer Telemetrie verwende eine der folgenden Optionen:
# 1. 'bun run dist/index.js' (nach 'bun run build')
# 2. 'npm start' 
# 3. Docker: 'docker run ...'
# 4. 'bun run dev' (Development-Modus)

# Fediverse/Mastodon Accounts
[[accounts]]
name = "main-account"
instance = "https://mastodon.social"
accessToken = "dein-token-hier"

[bot]
# Einfacher Provider f√ºr Telemetrie-Tests
[[bot.providers]]
name = "telemetry-test"
type = "ping"
cronSchedule = "*/5 * * * *"  # Alle 5 Minuten f√ºr h√§ufige Telemetrie-Daten
enabled = true
accounts = ["main-account"]

[bot.providers.config]
message = "üîç Telemetrie-Test: {{timestamp}}"

[logging]
level = "debug"  # Debug-Level f√ºr detaillierte Telemetrie-Logs

[telemetry]
# OpenTelemetry Konfiguration f√ºr Monitoring und Observability
enabled = true  # Telemetrie aktiviert
serviceName = "buntspecht"
serviceVersion = "0.2.0"

[telemetry.jaeger]
# Jaeger f√ºr Distributed Tracing
# Installiere Jaeger lokal: docker run -d --name jaeger -p 16686:16686 -p 14268:14268 jaegertracing/all-in-one:latest
enabled = true
endpoint = "http://localhost:14268/api/traces"

[telemetry.prometheus]
# Prometheus f√ºr Metriken
# Metriken sind verf√ºgbar unter http://localhost:9090/metrics
enabled = true
port = 9090
endpoint = "/metrics"

[telemetry.tracing]
# Tracing aktivieren f√ºr detaillierte Ausf√ºhrungsverfolgung
enabled = true

[telemetry.metrics]
# Metriken aktivieren f√ºr Performance-Monitoring
enabled = true

# Telemetrie-Hinweise:
#
# 1. Jaeger Setup (Distributed Tracing):
#    docker run -d --name jaeger \
#      -p 16686:16686 \
#      -p 14268:14268 \
#      jaegertracing/all-in-one:latest
#    
#    Jaeger UI: http://localhost:16686
#
# 2. Prometheus Setup (Metriken):
#    Die Metriken sind direkt unter http://localhost:9090/metrics verf√ºgbar
#    F√ºr ein vollst√§ndiges Prometheus-Setup:
#    
#    prometheus.yml:
#    global:
#      scrape_interval: 15s
#    scrape_configs:
#      - job_name: 'buntspecht'
#        static_configs:
#          - targets: ['localhost:9090']
#
# 3. Verf√ºgbare Metriken:
#    - buntspecht_posts_total: Anzahl der gesendeten Posts
#    - buntspecht_errors_total: Anzahl der Fehler
#    - buntspecht_provider_execution_duration_seconds: Ausf√ºhrungszeit der Provider
#    - buntspecht_active_connections: Anzahl aktiver Mastodon-Verbindungen
#
# 4. Verf√ºgbare Traces:
#    - mastodon.post_status: Mastodon-Post-Operationen
#    - provider.execute_task: Provider-Ausf√ºhrungen
#
# 5. Span-Attribute:
#    - mastodon.accounts_count: Anzahl der Ziel-Accounts
#    - mastodon.provider: Name des Providers
#    - mastodon.message_length: L√§nge der Nachricht
#    - provider.name: Name des Providers
#    - provider.type: Typ des Providers
#    - provider.accounts: Liste der Ziel-Accounts
#
# 6. Grafana Dashboard:
#    F√ºr erweiterte Visualisierung kann Grafana mit Prometheus und Jaeger verbunden werden
#    Beispiel-Queries:
#    - rate(buntspecht_posts_total[5m]): Posts pro Sekunde
#    - buntspecht_errors_total: Gesamtanzahl Fehler
#    - histogram_quantile(0.95, buntspecht_provider_execution_duration_seconds): 95. Perzentil der Ausf√ºhrungszeit