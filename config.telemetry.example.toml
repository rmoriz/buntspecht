# Buntspecht Telemetry Configuration Example
# This file shows how to configure OpenTelemetry for monitoring and observability
#
# IMPORTANT NOTE FOR SINGLE BINARY BUILDS:
# OpenTelemetry does NOT work with pre-compiled single binaries (buntspecht-linux-x64, etc.)!
# OpenTelemetry dependencies are excluded during 'bun build --compile' (--external @opentelemetry/*).
# 
# For telemetry use one of the following options:
# 1. 'bun run dist/index.js' (after 'bun run build')
# 2. 'npm start' 
# 3. Docker: 'docker run ...'
# 4. 'bun run dev' (development mode)

# Fediverse/Mastodon Accounts
[[accounts]]
name = "main-account"
instance = "https://mastodon.social"
accessToken = "your-token-here"

[bot]
# Simple provider for telemetry testing
[[bot.providers]]
name = "telemetry-test"
type = "ping"
cronSchedule = "*/5 * * * *"  # Every 5 minutes for frequent telemetry data
enabled = true
accounts = ["main-account"]

[bot.providers.config]
message = "Telemetry test: {{timestamp}}"

[logging]
level = "debug"  # Debug level for detailed telemetry logs

[telemetry]
# OpenTelemetry configuration for monitoring and observability
enabled = true  # Telemetry enabled
serviceName = "buntspecht"
serviceVersion = "0.5.0"

[telemetry.jaeger]
# Jaeger for distributed tracing
# Install Jaeger locally: docker run -d --name jaeger -p 16686:16686 -p 14268:14268 jaegertracing/all-in-one:latest
enabled = true
endpoint = "http://localhost:14268/api/traces"

[telemetry.prometheus]
# Prometheus for metrics
# Metrics are available at http://localhost:9090/metrics
enabled = true
port = 9090
endpoint = "/metrics"

[telemetry.tracing]
# Enable tracing for detailed execution tracking
enabled = true

[telemetry.metrics]
# Enable metrics for performance monitoring
enabled = true

# Telemetry Notes:
#
# 1. Jaeger Setup (Distributed Tracing):
#    docker run -d --name jaeger \
#      -p 16686:16686 \
#      -p 14268:14268 \
#      jaegertracing/all-in-one:latest
#    
#    Jaeger UI: http://localhost:16686
#
# 2. Prometheus Setup (Metrics):
#    Metrics are directly available at http://localhost:9090/metrics
#    For a complete Prometheus setup:
#    
#    prometheus.yml:
#    global:
#      scrape_interval: 15s
#    scrape_configs:
#      - job_name: 'buntspecht'
#        static_configs:
#          - targets: ['localhost:9090']
#
# 3. Available Metrics:
#    - buntspecht_posts_total: Number of posts sent
#    - buntspecht_errors_total: Number of errors
#    - buntspecht_provider_execution_duration_seconds: Provider execution time
#    - buntspecht_active_connections: Number of active Mastodon connections
#
# 4. Available Traces:
#    - mastodon.post_status: Mastodon post operations
#    - provider.execute_task: Provider executions
#
# 5. Span Attributes:
#    - mastodon.accounts_count: Number of target accounts
#    - mastodon.provider: Provider name
#    - mastodon.message_length: Message length
#    - provider.name: Provider name
#    - provider.type: Provider type
#    - provider.accounts: List of target accounts
#
# 6. Grafana Dashboard:
#    For advanced visualization, Grafana can be connected with Prometheus and Jaeger
#    Example queries:
#    - rate(buntspecht_posts_total[5m]): Posts per second
#    - buntspecht_errors_total: Total number of errors
#    - histogram_quantile(0.95, buntspecht_provider_execution_duration_seconds): 95th percentile execution time