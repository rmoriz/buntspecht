# Buntspecht Webhook Integration Configuration Example
# Copy this file to config.toml and adjust the values

# Fediverse/Mastodon Accounts
[[accounts]]
name = "main-account"
instance = "https://mastodon.social"
accessToken = "your-main-account-token-here"

[[accounts]]
name = "alerts-account"
instance = "https://fosstodon.org"
accessToken = "your-alerts-account-token-here"

[bot]
# Push providers for webhook integration

# Provider 1: General alerts (uses global webhook secret)
[[bot.providers]]
name = "webhook-alerts"
type = "push"
enabled = true
accounts = ["alerts-account"]

[bot.providers.config]
defaultMessage = "Alert from external system"
allowExternalMessages = true
maxMessageLength = 500

# Provider 2: System notifications (uses provider-specific secret)
[[bot.providers]]
name = "system-notifications"
type = "push"
enabled = true
accounts = ["main-account"]

[bot.providers.config]
defaultMessage = "System notification"
allowExternalMessages = true
maxMessageLength = 280
webhookSecret = "system-specific-secret-123"
rateLimitMessages = 3  # Allow 3 messages per 5 minutes
rateLimitWindowSeconds = 300

# Provider 3: CI/CD notifications (uses provider-specific secret)
[[bot.providers]]
name = "cicd-notifications"
type = "push"
enabled = true
accounts = ["main-account", "alerts-account"]

[bot.providers.config]
defaultMessage = "CI/CD Pipeline Update"
allowExternalMessages = true
maxMessageLength = 400
webhookSecret = "cicd-webhook-secret-456"

# Provider 4: Monitoring alerts (high priority, uses provider-specific secret)
[[bot.providers]]
name = "monitoring-critical"
type = "push"
enabled = true
accounts = ["alerts-account"]

[bot.providers.config]
defaultMessage = "CRITICAL: Monitoring Alert"
allowExternalMessages = true
maxMessageLength = 500
webhookSecret = "monitoring-secret-789"

[webhook]
# Webhook server configuration
enabled = true
port = 3000
host = "0.0.0.0"  # Listen on all interfaces
path = "/webhook"  # Webhook endpoint path

# Security settings
secret = "global-webhook-secret-here"  # Required: Global webhook secret (mandatory when webhook is enabled)
allowedIPs = [  # Optional: IP whitelist (remove for no restrictions)
  "127.0.0.1",
  "::1",
  "192.168.1.0/24",
  "10.0.0.0/8"
]

# Performance settings
maxPayloadSize = 1048576  # 1MB max payload size
timeout = 30000  # 30 seconds timeout

[logging]
level = "info"

[telemetry]
# OpenTelemetry configuration for monitoring and observability
# IMPORTANT: Telemetry only works with 'bun run' or 'npm start', NOT with single binaries!
# Single binaries (buntspecht-linux-x64, etc.) have OpenTelemetry dependencies excluded.
# For telemetry use Docker or run the bot directly with Bun/Node.js.
enabled = false
serviceName = "buntspecht"
serviceVersion = "0.4.6"

[telemetry.jaeger]
enabled = false
endpoint = "http://localhost:14268/api/traces"

[telemetry.prometheus]
enabled = false
port = 9090
endpoint = "/metrics"

[telemetry.tracing]
enabled = false

[telemetry.metrics]
enabled = false

# Webhook Usage Examples:
#
# 1. Basic webhook call using global secret (for webhook-alerts provider):
# curl -X POST http://localhost:3000/webhook \
#   -H "Content-Type: application/json" \
#   -H "X-Webhook-Secret: global-webhook-secret-here" \
#   -d '{"provider": "webhook-alerts"}'
#
# 2. Webhook call using provider-specific secret (for system-notifications):
# curl -X POST http://localhost:3000/webhook \
#   -H "Content-Type: application/json" \
#   -H "X-Webhook-Secret: system-specific-secret-123" \
#   -d '{"provider": "system-notifications", "message": "Deployment completed successfully!"}'
#
# 3. Webhook call using provider-specific secret (for cicd-notifications):
# curl -X POST http://localhost:3000/webhook \
#   -H "Content-Type: application/json" \
#   -H "X-Webhook-Secret: cicd-webhook-secret-456" \
#   -d '{
#     "provider": "cicd-notifications",
#     "message": "Build #123 completed",
#     "metadata": {
#       "build_id": "123",
#       "status": "success",
#       "branch": "main"
#     }
#   }'
#
# 4. Webhook call using provider-specific secret (for monitoring-critical):
# curl -X POST http://localhost:3000/webhook \
#   -H "Content-Type: application/json" \
#   -H "X-Webhook-Secret: monitoring-secret-789" \
#   -d '{
#     "provider": "monitoring-critical",
#     "message": "CRITICAL: CPU usage > 90% on server-01"
#   }'
#
# Provider-Specific Webhook Secrets:
# - Each push provider can have its own webhookSecret in the config
# - If a provider has a webhookSecret, it overrides the global webhook secret
# - If no provider-specific secret is set, the global webhook.secret is used
# - This allows different systems to use different secrets for security isolation
#
# Security Benefits:
# - Different external systems can use different secrets
# - Compromised secret only affects one provider, not all
# - Easier to rotate secrets for specific integrations
# - Better audit trail for webhook sources
#
# Security Notes:
# - Always use HTTPS in production
# - Set strong webhook secrets (both global and provider-specific)
# - Use IP whitelisting when possible
# - Consider rate limiting at the reverse proxy level
# - Monitor webhook logs for suspicious activity
# - Rotate secrets regularly