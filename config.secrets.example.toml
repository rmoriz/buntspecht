# Buntspecht Configuration with External Secret Sources
# Copy this file to config.toml and adjust the values

# Example 1: Traditional direct credentials (unchanged - still works)
[[accounts]]
name = "mastodon-direct"
type = "mastodon"
instance = "https://mastodon.social"
accessToken = "your-actual-token-here"
defaultVisibility = "unlisted"

# Example 2: Environment variable references (simple ${VAR} syntax)
[[accounts]]
name = "mastodon-env"
type = "mastodon"
instance = "https://mastodon.social"
accessToken = "${MASTODON_ACCESS_TOKEN}"  # Reads from environment variable
defaultVisibility = "unlisted"

# Example 3: HashiCorp Vault with specific key
[[accounts]]
name = "mastodon-vault"
type = "mastodon"
instance = "https://mastodon.social"
accessTokenSource = "vault://secret/mastodon/production-token"  # HashiCorp Vault
defaultVisibility = "unlisted"

# Example 4: HashiCorp Vault with key parameter
[[accounts]]
name = "mastodon-vault-key"
type = "mastodon"
instance = "https://mastodon.social"
accessTokenSource = "vault://secret/mastodon/credentials?key=access_token"  # Specific key
defaultVisibility = "unlisted"

# Example 5: File-based secrets
[[accounts]]
name = "mastodon-file"
type = "mastodon"
instance = "https://mastodon.social"
accessTokenSource = "file:///etc/secrets/mastodon-token"  # Read from file
defaultVisibility = "unlisted"

# Example 6: AWS Secrets Manager (simple)
[[accounts]]
name = "mastodon-aws"
type = "mastodon"
instance = "https://mastodon.social"
accessTokenSource = "aws://buntspecht-secrets/mastodon-token"  # AWS Secrets Manager
defaultVisibility = "unlisted"

# Example 7: AWS Secrets Manager with key and region
[[accounts]]
name = "mastodon-aws-advanced"
type = "mastodon"
instance = "https://mastodon.social"
accessTokenSource = "aws://buntspecht/credentials?key=mastodon_token&region=eu-west-1"  # Specific key and region
defaultVisibility = "unlisted"

# Example 8: Azure Key Vault (simple)
[[accounts]]
name = "mastodon-azure"
type = "mastodon"
instance = "https://mastodon.social"
accessTokenSource = "azure://my-keyvault/mastodon-token"  # Azure Key Vault
defaultVisibility = "unlisted"

# Example 9: Azure Key Vault with specific version
[[accounts]]
name = "mastodon-azure-versioned"
type = "mastodon"
instance = "https://mastodon.social"
accessTokenSource = "azure://my-keyvault/mastodon-token?version=abc123def456"  # Specific version
defaultVisibility = "unlisted"

# Example 10: Google Cloud Secret Manager (simple)
[[accounts]]
name = "mastodon-gcp"
type = "mastodon"
instance = "https://mastodon.social"
accessTokenSource = "gcp://my-project/mastodon-token"  # Google Cloud Secret Manager
defaultVisibility = "unlisted"

# Example 11: Google Cloud Secret Manager with specific version
[[accounts]]
name = "mastodon-gcp-versioned"
type = "mastodon"
instance = "https://mastodon.social"
accessTokenSource = "gcp://my-project/mastodon-token?version=5"  # Specific version
defaultVisibility = "unlisted"

# Example 12: Bluesky with mixed credential sources
[[accounts]]
name = "bluesky-mixed"
type = "bluesky"
identifier = "mybot.bsky.social"  # Direct value
passwordSource = "file:///etc/secrets/bluesky-app-password"  # External source
defaultVisibility = "public"

# Example 13: Bluesky with environment variables
[[accounts]]
name = "bluesky-env"
type = "bluesky"
identifier = "${BLUESKY_IDENTIFIER}"  # Environment variable
password = "${BLUESKY_APP_PASSWORD}"   # Environment variable
defaultVisibility = "public"

# Example 14: Bluesky with Vault credentials
[[accounts]]
name = "bluesky-vault"
type = "bluesky"
identifier = "bot.bsky.social"  # Direct value
passwordSource = "vault://secret/bluesky/app-password"  # Vault source
defaultVisibility = "public"

# Example 15: Bluesky with Azure Key Vault
[[accounts]]
name = "bluesky-azure"
type = "bluesky"
identifier = "bot.bsky.social"  # Direct value
passwordSource = "azure://my-keyvault/bluesky-app-password"  # Azure Key Vault
defaultVisibility = "public"

# Example 16: Bluesky with Google Cloud Secret Manager
[[accounts]]
name = "bluesky-gcp"
type = "bluesky"
identifier = "bot.bsky.social"  # Direct value
passwordSource = "gcp://my-project/bluesky-app-password"  # Google Cloud Secret Manager
defaultVisibility = "public"

# Example 17: Complex scenario - token that actually starts with "vault://"
# This demonstrates why we need separate *Source fields
[[accounts]]
name = "mastodon-edge-case"
type = "mastodon"
instance = "https://mastodon.social"
accessToken = "vault://this-is-actually-my-real-token-not-a-reference"  # Direct value
defaultVisibility = "unlisted"

[bot]
# Provider configuration (unchanged)
[[bot.providers]]
name = "hourly-ping"
type = "ping"
cronSchedule = "0 * * * *"
enabled = true
accounts = ["mastodon-env", "bluesky-mixed"]  # Cross-platform posting

[bot.providers.config]
message = "Hourly ping with external secrets! üîê"

[logging]
level = "info"

[telemetry]
enabled = false
serviceName = "buntspecht"
serviceVersion = "0.6.5"

[telemetry.jaeger]
enabled = false
endpoint = "http://localhost:14268/api/traces"

[telemetry.prometheus]
enabled = false
port = 9090
endpoint = "/metrics"

[telemetry.tracing]
enabled = false

[telemetry.metrics]
enabled = false

# Secret Source Configuration Examples:
#
# 1. Environment Variables:
#    Use ${VARIABLE_NAME} syntax in any credential field
#    Example: accessToken = "${MASTODON_TOKEN}"
#
# 2. File-based Secrets:
#    Use accessTokenSource = "file:///path/to/secret/file"
#    The file should contain only the secret value (trailing newlines are trimmed)
#
# 3. HashiCorp Vault:
#    Use accessTokenSource = "vault://secret/path/to/credential"
#    Optional key parameter: "vault://secret/path?key=fieldName"
#    Requires VAULT_ADDR and VAULT_TOKEN environment variables
#    Install dependency: npm install node-vault
#
# 4. AWS Secrets Manager:
#    Use accessTokenSource = "aws://secret-name"
#    Optional parameters: "aws://secret-name?key=fieldName&region=us-west-2"
#    Uses AWS SDK v3 default credential chain (env vars, IAM roles, ~/.aws/credentials, SSO)
#    Install dependency: npm install @aws-sdk/client-secrets-manager
#
# 5. Azure Key Vault:
#    Use accessTokenSource = "azure://vault-name/secret-name"
#    Optional version parameter: "azure://vault-name/secret-name?version=version-id"
#    Uses DefaultAzureCredential (env vars, managed identity, Azure CLI, etc.)
#    Install dependencies: npm install @azure/keyvault-secrets @azure/identity
#
# 6. Google Cloud Secret Manager:
#    Use accessTokenSource = "gcp://project-id/secret-name"
#    Optional version parameter: "gcp://project-id/secret-name?version=version-id"
#    Uses Application Default Credentials (service account, gcloud auth, metadata server)
#    Install dependency: npm install @google-cloud/secret-manager
#
# Validation Rules:
# - Cannot specify both direct field and *Source field for the same credential
# - Must specify either direct field or *Source field (one is required)
# - Environment variables in direct fields (${VAR}) are automatically resolved
# - External sources are resolved during bot initialization
#
# Security Notes:
# - Secret values are never logged
# - Resolved secrets are cleared from memory when possible
# - Failed secret resolution prevents bot startup
# - Use appropriate file permissions for file-based secrets (600 recommended)
#
# Migration Strategy:
# 1. Start with current direct credentials (no changes needed)
# 2. Move sensitive credentials to environment variables using ${VAR} syntax
# 3. Gradually migrate to external secret managers using *Source fields
# 4. Remove direct credential values from configuration files