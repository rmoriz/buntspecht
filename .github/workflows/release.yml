name: Manual Release

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Release tag (e.g., v1.2.3)'
        required: true
        type: string
      prerelease:
        description: 'Create as prerelease'
        required: false
        default: false
        type: boolean
      draft:
        description: 'Create as draft'
        required: false
        default: false
        type: boolean

jobs:
  validate-release:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      tag_name: ${{ steps.validate.outputs.tag_name }}
      version: ${{ steps.validate.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: "1.2.18"
    
    - name: Install dependencies
      run: bun install --frozen-lockfile
    
    - name: Run tests
      run: bun run test
    
    - name: Run linter
      run: bun run lint
    
    - name: Validate tag and version
      id: validate
      run: |
        TAG_NAME="${{ github.event.inputs.tag_name }}"
        
        # Validate tag format
        if [[ ! "$TAG_NAME" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "ERROR: Invalid tag format. Expected format: v1.2.3"
          exit 1
        fi
        
        # Extract version from tag
        VERSION=${TAG_NAME#v}
        
        # Check if tag already exists
        if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
          echo "ERROR: Tag $TAG_NAME already exists"
          exit 1
        fi
        
        # Verify version consistency with package.json
        PACKAGE_VERSION=$(node -e "console.log(require('./package.json').version)")
        
        echo "Package.json version: $PACKAGE_VERSION"
        echo "Requested version: $VERSION"
        
        if [ "$PACKAGE_VERSION" != "$VERSION" ]; then
          echo "ERROR: Version mismatch between package.json ($PACKAGE_VERSION) and requested tag ($VERSION)"
          echo "Please update package.json version to $VERSION before creating the release"
          exit 1
        fi
        
        echo "SUCCESS: Version validation passed"
        echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Generate changelog
      id: changelog
      run: |
        TAG_NAME="${{ steps.validate.outputs.tag_name }}"
        
        # Get the previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD 2>/dev/null || echo "")
        
        if [ -z "$PREVIOUS_TAG" ]; then
          echo "No previous tag found, generating changelog from first commit"
          PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
        fi
        
        echo "Generating changelog from $PREVIOUS_TAG to HEAD"
        
        # Generate changelog
        CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD --no-merges)
        
        if [ -z "$CHANGELOG" ]; then
          CHANGELOG="- No changes since last release"
        fi
        
        # Create full changelog content
        FULL_CHANGELOG="## What's Changed
        
        $CHANGELOG
        
        **Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...$TAG_NAME"
        
        # Save changelog to file and output
        echo "$FULL_CHANGELOG" > changelog.md
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$FULL_CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

  build-and-release:
    needs: validate-release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: "1.2.18"
    
    - name: Install dependencies
      run: bun install --frozen-lockfile
    
    - name: Create dist directory
      run: mkdir -p dist
    
    - name: Build all binaries
      run: |
        echo "Building Buntspecht binaries for all platforms..."
        
        echo "Building Linux x64..."
        bun run build:binary:linux-x64
        
        echo "Building Linux ARM64..."
        bun run build:binary:linux-arm64
        
        echo "Building Linux ARMv8..."
        bun run build:binary:linux-armv8
        
        echo "Building macOS x64..."
        bun run build:binary:macos-x64
        
        echo "Building macOS ARM64..."
        bun run build:binary:macos-arm64
        
        echo "All binaries built successfully!"
        ls -lh dist/buntspecht-*
    
    - name: Test binaries
      run: |
        echo "Testing binaries..."
        
        # Test Linux x64 binary (should work on Ubuntu runner)
        if [ -f "dist/buntspecht-linux-x64" ]; then
          echo "Testing Linux x64 binary..."
          chmod +x dist/buntspecht-linux-x64
          ./dist/buntspecht-linux-x64 --version || echo "Version test failed"
          ./dist/buntspecht-linux-x64 --help >/dev/null || echo "Help test failed"
        fi
        
        echo "Binary testing complete!"
    
    - name: Calculate checksums
      run: |
        cd dist
        for file in buntspecht-*; do
          if [ -f "$file" ]; then
            sha256sum "$file" >> checksums.txt
          fi
        done
        echo "Checksums:"
        cat checksums.txt
    
    - name: Create and push tag
      run: |
        TAG_NAME="${{ needs.validate-release.outputs.tag_name }}"
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
        git push origin "$TAG_NAME"
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.validate-release.outputs.tag_name }}
        name: "Release ${{ needs.validate-release.outputs.tag_name }}"
        body: |
          # Buntspecht ${{ needs.validate-release.outputs.version }}
          
          A reliable Fediverse bot for automated messages with flexible sources.
          
          ## Installation
          
          ### Download Binary
          Download the appropriate binary for your platform from the assets below:
          - `buntspecht-linux-x64` - Linux x86_64
          - `buntspecht-linux-arm64` - Linux ARM64
          - `buntspecht-linux-armv8` - Linux ARMv8
          - `buntspecht-macos-x64` - macOS Intel
          - `buntspecht-macos-arm64` - macOS Apple Silicon
          
          ### Docker
          ```bash
          docker pull ghcr.io/${{ github.repository_owner }}/buntspecht:latest
          ```
          
          ### Verify Download
          Check the `checksums.txt` file to verify your download integrity.
          
          ## Quick Start
          
          1. Download the binary for your platform
          2. Make it executable: `chmod +x buntspecht-*`
          3. Create a config file: `cp config.example.toml config.toml`
          4. Edit the config with your Mastodon credentials
          5. Run: `./buntspecht-* --config config.toml`
          
          ## Release Notes
          
          ${{ needs.validate-release.outputs.changelog }}
          
          ---
          
          **Note about OpenTelemetry**: This release includes OpenTelemetry instrumentation for observability. The binary releases are built with Bun's single binary compilation for optimal performance and easy deployment.
        files: |
          dist/buntspecht-linux-x64
          dist/buntspecht-linux-arm64
          dist/buntspecht-linux-armv8
          dist/buntspecht-macos-x64
          dist/buntspecht-macos-arm64
          dist/checksums.txt
        draft: ${{ github.event.inputs.draft }}
        prerelease: ${{ github.event.inputs.prerelease }}
        generate_release_notes: false