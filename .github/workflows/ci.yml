name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        bun-version: ["1.2.17"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Bun ${{ matrix.bun-version }}
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: ${{ matrix.bun-version }}
        
    - name: Install dependencies
      run: bun install --frozen-lockfile
      
    - name: Run linter
      run: bun run lint
      
    - name: Run tests
      run: bun run test:coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.bun-version == '1.2.17'
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: "1.2.17"
        
    - name: Install dependencies
      run: bun install --frozen-lockfile
      
    - name: Build application
      run: bun run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  binaries:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: "1.2.17"
        
    - name: Install dependencies
      run: bun install --frozen-lockfile
      
    - name: Create dist directory
      run: mkdir -p dist
      
    - name: Build Linux x64 binary
      run: bun run build:binary:linux-x64
      
    - name: Build Linux ARM64 binary
      run: bun run build:binary:linux-arm64
      
    - name: Build Linux ARMv8 binary
      run: bun run build:binary:linux-armv8
      
    - name: Build macOS x64 binary
      run: bun run build:binary:macos-x64
      
    - name: Build macOS ARM64 binary
      run: bun run build:binary:macos-arm64
      
    - name: Upload binaries as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: buntspecht-binaries
        path: |
          dist/buntspecht-linux-x64
          dist/buntspecht-linux-arm64
          dist/buntspecht-linux-armv8
          dist/buntspecht-macos-x64
          dist/buntspecht-macos-arm64
        retention-days: 30

  # Release job moved to dedicated release.yml workflow
  # This ensures better control over release process and avoids conflicts

  docker:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      id: docker-login
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository_owner }}/buntspecht
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: |
          ${{ steps.meta.outputs.labels }}
          org.opencontainers.image.description=Buntspecht - A reliable Fediverse bot for automated messages with flexible sources
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  check-german-readme:
    runs-on: ubuntu-latest
    # Check if German README needs updating when English README changes
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Check German README status
      run: node scripts/update-german-readme.js
      continue-on-error: true

  security:
    runs-on: ubuntu-latest
    # Security scanning using GitHub's built-in tools and free alternatives
    # Note: Bun doesn't have a built-in audit command like npm
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js for security scanning
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install dependencies with npm for audit
      run: |
        # Use npm for security audit since it's free and built-in
        npm install --package-lock-only
        npm audit --audit-level=high
      continue-on-error: true
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript
        # Specify queries for better security coverage
        queries: security-and-quality
      continue-on-error: true
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:javascript"
      continue-on-error: true